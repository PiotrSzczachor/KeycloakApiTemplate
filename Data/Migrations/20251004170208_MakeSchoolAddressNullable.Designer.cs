// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251004170208_MakeSchoolAddressNullable")]
    partial class MakeSchoolAddressNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Models.Domain.Address", b =>
                {
                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Models.Domain.Event", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("Closed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrganizationGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Qualifications")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Guid");

                    b.HasIndex("AddressGuid")
                        .IsUnique();

                    b.HasIndex("OrganizationGuid")
                        .IsUnique();

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Models.Domain.Organization", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("AddressGuid")
                        .IsUnique();

                    b.HasIndex("UserGuid")
                        .IsUnique();

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Models.Domain.School", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AddressGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("AddressGuid")
                        .IsUnique();

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("Models.Domain.User", b =>
                {
                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("OrganizationGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SchoolGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Guid");

                    b.HasIndex("OrganizationGuid")
                        .IsUnique();

                    b.HasIndex("SchoolGuid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Models.Domain.UserEvent", b =>
                {
                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventGuid")
                        .HasColumnType("uuid");

                    b.HasKey("UserGuid", "EventGuid");

                    b.HasIndex("EventGuid");

                    b.ToTable("UsersEvents");
                });

            modelBuilder.Entity("Models.Domain.Event", b =>
                {
                    b.HasOne("Models.Domain.Address", "Address")
                        .WithOne()
                        .HasForeignKey("Models.Domain.Event", "AddressGuid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Models.Domain.Organization", "Organization")
                        .WithOne()
                        .HasForeignKey("Models.Domain.Event", "OrganizationGuid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Models.Domain.Organization", b =>
                {
                    b.HasOne("Models.Domain.Address", "Address")
                        .WithOne()
                        .HasForeignKey("Models.Domain.Organization", "AddressGuid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Models.Domain.User", "User")
                        .WithOne()
                        .HasForeignKey("Models.Domain.Organization", "UserGuid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Domain.School", b =>
                {
                    b.HasOne("Models.Domain.Address", "Address")
                        .WithOne()
                        .HasForeignKey("Models.Domain.School", "AddressGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Models.Domain.User", b =>
                {
                    b.HasOne("Models.Domain.Organization", "Organization")
                        .WithOne()
                        .HasForeignKey("Models.Domain.User", "OrganizationGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Models.Domain.School", "School")
                        .WithMany("Users")
                        .HasForeignKey("SchoolGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Organization");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Models.Domain.UserEvent", b =>
                {
                    b.HasOne("Models.Domain.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Domain.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Domain.Event", b =>
                {
                    b.Navigation("UserEvents");
                });

            modelBuilder.Entity("Models.Domain.School", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Models.Domain.User", b =>
                {
                    b.Navigation("UserEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
